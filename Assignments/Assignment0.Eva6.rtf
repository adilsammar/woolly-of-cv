{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red255\green255\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c100000\c100000\c99985\c0;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww13040\viewh15140\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf2 Answer 1:\expnd0\expndtw0\kerning0
 \
\
Channel is a container of similar  or specific kind of information. It can be anything like features, shapes, texture, colour, gradient, curves, edges, patterns, objects  \'85.\
Channel is like a collection of similar type of features extracted by kernel. Kernel stores information about the image in neuron. And collection of neurons is a channel by that kernel.\
Channels are can be seen\
\pard\tx566\pardeftab720\partightenfactor0
\cf2 \
Kernel comes to use when from an image, if we want to extract some useful features of similar type.\
Kernel is like a filter or like a feature extractor, kernel outputs its own channel.\
Kernel extracts information and store it in neutron(collection of neutrons is a channel)\
\cf0 \kerning1\expnd0\expndtw0 Kernels cannot be seen.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Answer 2:\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \expnd0\expndtw0\kerning0
Kernels can be of various sizes i.e. in images we have 2D or 3D kernels of any desired size :5x5 or 100x100. It can be anything. But it is preferable to have kernel size of 3x3 over any other kernel size. The following reasons are:\
1. Reaching desired receptive field using 3x3 over big kernels. It reduces parameters significantly,For Eg: A 5x5 Kernel will have 25 neurons(In an image every pixel is a neuron), so to view all the pixels and make a decision if we apply a 5x5 directly it will have 25 parameters which are the weights of neuron where as if we apply two 3x3, the total parameter count will be 9+9 =18. And once we go for bigger networks over complicated images, the difference will be large.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 2. \expnd0\expndtw0\kerning0
Having Odd Kernels allows use to make shapes like triangle more easily which will be tough in even kernels.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 3. \expnd0\expndtw0\kerning0
The GPUs are designed for faster execution of 3x3, hence the processing time is faster\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Kernels determines the receptive field of a channel(Image). \
\
1st reason:\
\
Performing convolutions essentially mean performing dot product between the kernel and the channel. Here, having a larger kernel size would mean higher computational cost. So we prefer the small kernel size. And 3x3 or 5x5 ends up being the most used kernel size.\
\
\
2nd reason:\
 \
Using same kernel size as the channel:\
That would mean there will be no convolution operation performed\
\
Having a smaller kernel size would mean missing out the representation on the larger features while having a larger kernel size would mean missing out on the small features. \
\
Using 1x1 kernel: (Smallest)\
Having a kernel size of 1x1 would mean we have almost no convolution applied on the image.\
We do not use 2x2 or even-sized kernels since it lacks symmetry around the matrix or the centre point.\
3x3 fits in perfectly if we want to have representations even on the smaller features.\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Answer 3:\
\
 99 convolution operation is needed to be performed reach 1x1 from 199x199 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	1.	}199x199 >197x197			\
{\listtext	2.	}197x197 > 195x195					\
{\listtext	3.	}195x195 > 193x193			\
{\listtext	4.	}193x193 > 191x191			\
{\listtext	5.	}191x191 > 189x189			\
{\listtext	6.	}189x189 > 187x187			\
{\listtext	7.	}187x187 > 185x185			\
{\listtext	8.	}185x185 > 183x183			\
{\listtext	9.	}183x183 > 181x181\
{\listtext	10.	}181x181 > 179x179\
{\listtext	11.	}179x179 > 177x177\
{\listtext	12.	}177x177 > 175x175\
{\listtext	13.	}175x175 > 173x173\
{\listtext	14.	}173x173 > 171x171\
{\listtext	15.	}171x171 > 169x169\
{\listtext	16.	}169x169 > 167x167\
{\listtext	17.	}167x167 > 165x165\
{\listtext	18.	}165x165 > 163x163\
{\listtext	19.	}163x163 > 161x161\
{\listtext	20.	}161x161 > 159x159\
{\listtext	21.	}159x159 > 157x157\
{\listtext	22.	}157x157 > 155x155\
{\listtext	23.	}155x155 > 153x153\
{\listtext	24.	}153x153 > 151x151\
{\listtext	25.	}151x151 > 149x149\
{\listtext	26.	}149x149 > 147x147\
{\listtext	27.	}147x147 > 145x145\
{\listtext	28.	}145x145 > 143x143\
{\listtext	29.	}143x143 > 141x141\
{\listtext	30.	}141x141 > 139x139\
{\listtext	31.	}139x139 > 137x137\
{\listtext	32.	}137x137 > 135x135\
{\listtext	33.	}135x135 > 133x133\
{\listtext	34.	}133x133 > 131x131\
{\listtext	35.	}131x131 > 129x129\
{\listtext	36.	}129x129 > 127x127\
{\listtext	37.	}127x127 > 125x125\
{\listtext	38.	}125x125 > 123x123\
{\listtext	39.	}123x123 > 121x121\
{\listtext	40.	}121x121 > 119x119\
{\listtext	41.	}119x119  > 117x117\
{\listtext	42.	}117x117  > 115x115\
{\listtext	43.	}115x115 > 113x113\
{\listtext	44.	}113x113 > 111x111\
{\listtext	45.	}111x111 > 109x109\
{\listtext	46.	}109x109 > 107x107\
{\listtext	47.	}107x107 > 105x105\
{\listtext	48.	}105x105 > 103x103\
{\listtext	49.	}103x103 > 101x101\
{\listtext	50.	}101x101 > 99x99\
{\listtext	51.	}  99x99 > 97x97\
{\listtext	52.	}  97x97 > 95x95\
{\listtext	53.	}  95x95 > 93x93\
{\listtext	54.	}  93x93 > 91x91\
{\listtext	55.	}  91x91 > 89x89\
{\listtext	56.	}  89x89 > 87x87\
{\listtext	57.	}  87x87 > 85x85\
{\listtext	58.	}  85x85 > 83x83\
{\listtext	59.	}  83x83 > 81x81\
{\listtext	60.	}  81x81 > 79x79\
{\listtext	61.	}  79x79 > 77x77\
{\listtext	62.	}  77x77 > 75x75\
{\listtext	63.	}  75x75 > 73x73\
{\listtext	64.	}  73x73 > 71x71\
{\listtext	65.	}  71x71 > 69x69\
{\listtext	66.	}  69x69 > 67x67\
{\listtext	67.	}  67x67 > 65x65\
{\listtext	68.	}  65x65 > 63x63\
{\listtext	69.	}  63x63 > 61x61\
{\listtext	70.	}  61x61 > 59x59\
{\listtext	71.	}  59x59 > 57x57\
{\listtext	72.	}  57x57 > 55x55\
{\listtext	73.	}  55x55 > 53x53\
{\listtext	74.	}  53x53 > 51x51\
{\listtext	75.	}  51x51 > 49x49\
{\listtext	76.	}  49x49 > 47x47\
{\listtext	77.	}  47x47 > 45x45\
{\listtext	78.	}  45x45 > 43x43\
{\listtext	79.	}  43x43 > 41x41\
{\listtext	80.	}  41x41 > 39x39\
{\listtext	81.	}  39x39 > 37x37\
{\listtext	82.	}  37x37 > 35x35\
{\listtext	83.	}  35x35 > 33x33\
{\listtext	84.	}  33x33 > 31x31\
{\listtext	85.	}  31x31 > 29x29\
{\listtext	86.	}  29x29 > 27x27\
{\listtext	87.	}  27x27 > 25x25\
{\listtext	88.	}  25x25 > 23x23\
{\listtext	89.	}  23x23 > 21x21\
{\listtext	90.	}  21x21 > 19x19\
{\listtext	91.	}  19x19 > 17x17\
{\listtext	92.	}  17x17 > 15x15\
{\listtext	93.	}  15x15 > 13x13\
{\listtext	94.	}  13x13 > 11x11\
{\listtext	95.	}  11x11 > 9x9\
{\listtext	96.	}    9x9 > 7x7\
{\listtext	97.	}    7x7 > 5x5\
{\listtext	98.	}    5x5 > 3x3\
{\listtext	99.	}    3x3 > 1x1\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Answer 4: \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 Kernels values are randomly assigned from a set of random numbers.\
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \expnd0\expndtw0\kerning0
We can not have kernel values as 0s or 1s or anything except random for training from scratch. The reasons are as follows:\
Kernels are filters which work over the input image and gives out channels as output. If we have all values as 0s, all the convolution operation(Discussed in Part 2) that will take place will be 0. Lets take an Example of Filtering Tea: All 0s means the filter does not have opening to filter the tea from tea leaves. Hence when we pour our tea via that filter we will get nothing.\
And if we initialize all kernel values with 1, we will have identical kernels giving same channels as output. The task of the kernel should be to separate, where as if we have same filters it will produce same results. For example: if the filter used to separate tea from tea leaves is open (no nets), it will give the same unfiltered tea back.\kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \cb1 \
Answer 5:\
During the training , the base layer neurons store all the pixels of image/input.\
In each layer, there is a kernel that extracts features or combines low-level features to give high-level features.\
Kernel values are initialized randomly, then, during the training, the model learns and corrects these values based on the features it intends to extract.\
1st layer combines pixels to detect edges\
2nd layer combines edges to make textures, gradients\
3rd layer combines textures to make patterns\
4th layer combines patterns to make parts of objects\
5th layer combines parts of objects to make objects\
Finally, the name/type of object is predicted}